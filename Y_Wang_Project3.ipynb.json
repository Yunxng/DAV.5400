{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the pandas + numpy libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from pandas import Series,DataFrame\n",
    "# load the Series and DataFrame functions \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data1 :we creat a data that shows each subject score per student and put it on Github. Now we read it in jupyter notebook and analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Student</th>\n",
       "      <th>Physics</th>\n",
       "      <th>Chemistry</th>\n",
       "      <th>English</th>\n",
       "      <th>Math</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>John</td>\n",
       "      <td>78</td>\n",
       "      <td>79</td>\n",
       "      <td>56</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alice</td>\n",
       "      <td>58</td>\n",
       "      <td>72</td>\n",
       "      <td>91</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Rachel</td>\n",
       "      <td>22</td>\n",
       "      <td>61</td>\n",
       "      <td>88</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Tom</td>\n",
       "      <td>78</td>\n",
       "      <td>89</td>\n",
       "      <td>56</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Student  Physics  Chemistry  English  Math\n",
       "0    John       78         79       56    95\n",
       "1   Alice       58         72       91    81\n",
       "2  Rachel       22         61       88    64\n",
       "3     Tom       78         89       56    83"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read csv from github \n",
    "Score = pd.read_csv('https://raw.githubusercontent.com/Yunxng/DAV.5400/master/Score.csv')\n",
    "\n",
    "Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Student</th>\n",
       "      <th>Physics</th>\n",
       "      <th>Chemistry</th>\n",
       "      <th>English</th>\n",
       "      <th>Math</th>\n",
       "      <th>Score</th>\n",
       "      <th>Average Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>John</td>\n",
       "      <td>78.0</td>\n",
       "      <td>79.00</td>\n",
       "      <td>56.00</td>\n",
       "      <td>95.00</td>\n",
       "      <td>308.00</td>\n",
       "      <td>77.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alice</td>\n",
       "      <td>58.0</td>\n",
       "      <td>72.00</td>\n",
       "      <td>91.00</td>\n",
       "      <td>81.00</td>\n",
       "      <td>302.00</td>\n",
       "      <td>75.5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Rachel</td>\n",
       "      <td>22.0</td>\n",
       "      <td>61.00</td>\n",
       "      <td>88.00</td>\n",
       "      <td>64.00</td>\n",
       "      <td>235.00</td>\n",
       "      <td>58.7500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Tom</td>\n",
       "      <td>78.0</td>\n",
       "      <td>89.00</td>\n",
       "      <td>56.00</td>\n",
       "      <td>83.00</td>\n",
       "      <td>306.00</td>\n",
       "      <td>76.5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Total Average</td>\n",
       "      <td>59.0</td>\n",
       "      <td>75.25</td>\n",
       "      <td>72.75</td>\n",
       "      <td>80.75</td>\n",
       "      <td>287.75</td>\n",
       "      <td>71.9375</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Student  Physics  Chemistry  English   Math   Score  Average Score\n",
       "0           John     78.0      79.00    56.00  95.00  308.00        77.0000\n",
       "1          Alice     58.0      72.00    91.00  81.00  302.00        75.5000\n",
       "2         Rachel     22.0      61.00    88.00  64.00  235.00        58.7500\n",
       "3            Tom     78.0      89.00    56.00  83.00  306.00        76.5000\n",
       "4  Total Average     59.0      75.25    72.75  80.75  287.75        71.9375"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Seek everyone's total achievement\n",
    "Score['Score'] = Score.apply(lambda x: x['Physics'] +  x['Chemistry'] \n",
    "                            +x['English']+x['Math'], axis=1) \n",
    "#Seeking the Average Achievement of Everyone\n",
    "Score['Average Score']=Score['Score']/4\n",
    "#Calculate the average score of each subject\n",
    "Score.loc[4]= Score.mean()\n",
    "Score.iloc[4,0]='Total Average'\n",
    "Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Student</th>\n",
       "      <th>Physics</th>\n",
       "      <th>Chemistry</th>\n",
       "      <th>English</th>\n",
       "      <th>Math</th>\n",
       "      <th>Score</th>\n",
       "      <th>Average Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>John</td>\n",
       "      <td>78.0</td>\n",
       "      <td>79.00</td>\n",
       "      <td>56.00</td>\n",
       "      <td>95.00</td>\n",
       "      <td>308.00</td>\n",
       "      <td>77.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alice</td>\n",
       "      <td>58.0</td>\n",
       "      <td>72.00</td>\n",
       "      <td>91.00</td>\n",
       "      <td>81.00</td>\n",
       "      <td>302.00</td>\n",
       "      <td>75.5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Rachel</td>\n",
       "      <td>22.0</td>\n",
       "      <td>61.00</td>\n",
       "      <td>88.00</td>\n",
       "      <td>64.00</td>\n",
       "      <td>235.00</td>\n",
       "      <td>58.7500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Tom</td>\n",
       "      <td>78.0</td>\n",
       "      <td>89.00</td>\n",
       "      <td>56.00</td>\n",
       "      <td>83.00</td>\n",
       "      <td>306.00</td>\n",
       "      <td>76.5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Total Average</td>\n",
       "      <td>59.0</td>\n",
       "      <td>75.25</td>\n",
       "      <td>72.75</td>\n",
       "      <td>80.75</td>\n",
       "      <td>287.75</td>\n",
       "      <td>71.9375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Total MAX</td>\n",
       "      <td>78.0</td>\n",
       "      <td>89.00</td>\n",
       "      <td>91.00</td>\n",
       "      <td>95.00</td>\n",
       "      <td>308.00</td>\n",
       "      <td>77.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Total MIN</td>\n",
       "      <td>22.0</td>\n",
       "      <td>61.00</td>\n",
       "      <td>56.00</td>\n",
       "      <td>64.00</td>\n",
       "      <td>235.00</td>\n",
       "      <td>58.7500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Student  Physics  Chemistry  English   Math   Score  Average Score\n",
       "0           John     78.0      79.00    56.00  95.00  308.00        77.0000\n",
       "1          Alice     58.0      72.00    91.00  81.00  302.00        75.5000\n",
       "2         Rachel     22.0      61.00    88.00  64.00  235.00        58.7500\n",
       "3            Tom     78.0      89.00    56.00  83.00  306.00        76.5000\n",
       "4  Total Average     59.0      75.25    72.75  80.75  287.75        71.9375\n",
       "5      Total MAX     78.0      89.00    91.00  95.00  308.00        77.0000\n",
       "6      Total MIN     22.0      61.00    56.00  64.00  235.00        58.7500"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Search for the highest and lowest scores in all subjects\n",
    "Score.loc[5] = Score.apply(lambda x: x.max())\n",
    "Score.loc[6] = Score.apply(lambda x: x.min())\n",
    "Score.iloc[5,0]='Total MAX'\n",
    "Score.iloc[6,0]='Total MIN'\n",
    "Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Student</th>\n",
       "      <th>Subject</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">Alice</th>\n",
       "      <th>Average Score</th>\n",
       "      <td>75.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chemistry</th>\n",
       "      <td>72.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>English</th>\n",
       "      <td>91.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Math</th>\n",
       "      <td>81.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Physics</th>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">John</th>\n",
       "      <th>Average Score</th>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chemistry</th>\n",
       "      <td>79.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>English</th>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Math</th>\n",
       "      <td>95.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Physics</th>\n",
       "      <td>78.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Score\n",
       "Student Subject             \n",
       "Alice   Average Score   75.5\n",
       "        Chemistry       72.0\n",
       "        English         91.0\n",
       "        Math            81.0\n",
       "        Physics         58.0\n",
       "John    Average Score   77.0\n",
       "        Chemistry       79.0\n",
       "        English         56.0\n",
       "        Math            95.0\n",
       "        Physics         78.0"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## change the dataset from wide format to long format by setting the \"Student\" as id variable\n",
    "long_score=pd.melt(Score, id_vars=[\"Student\"], value_vars=['Physics','Chemistry',\n",
    "                                                           'English','Math','Average Score'])\n",
    "# rename column for variable and value\n",
    "long_score.rename(columns={'variable':'Subject', 'value':'Score'}, inplace = True)\n",
    "# create a pivot table by mimic the origianl format\n",
    "long_score.pivot_table(index=['Student','Subject']).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above analysis, we can conclude that the highest scores of each subject are 78, 89, 91 and 95. The lowest scores of each subject are 22, 61, 56 and 64, respectively.The highest average and total scores were John and the lowest was Rachel."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data2:A small dataset containing test grades for students in a math class. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Test1</th>\n",
       "      <th>Test2</th>\n",
       "      <th>Test3</th>\n",
       "      <th>Test4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Reggie Miller</td>\n",
       "      <td>97.0</td>\n",
       "      <td>80</td>\n",
       "      <td>87.0</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Dan Bonner</td>\n",
       "      <td>76.0</td>\n",
       "      <td>68</td>\n",
       "      <td>80.0</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Steve Smith</td>\n",
       "      <td>84.0</td>\n",
       "      <td>75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Charles Barkey</td>\n",
       "      <td>0.0</td>\n",
       "      <td>89</td>\n",
       "      <td>0.0</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kenny Smith</td>\n",
       "      <td>80.0</td>\n",
       "      <td>81</td>\n",
       "      <td>79.0</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Chris Webber</td>\n",
       "      <td>75.0</td>\n",
       "      <td>75</td>\n",
       "      <td>76.0</td>\n",
       "      <td>92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Jalen Rose</td>\n",
       "      <td>80.0</td>\n",
       "      <td>85</td>\n",
       "      <td>84.0</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Jim Jackson</td>\n",
       "      <td>92.0</td>\n",
       "      <td>91</td>\n",
       "      <td>94.0</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Name  Test1  Test2  Test3  Test4\n",
       "0   Reggie Miller   97.0     80   87.0     91\n",
       "1      Dan Bonner   76.0     68   80.0     81\n",
       "2     Steve Smith   84.0     75    0.0     86\n",
       "3  Charles Barkey    0.0     89    0.0     76\n",
       "4     Kenny Smith   80.0     81   79.0     85\n",
       "5    Chris Webber   75.0     75   76.0     92\n",
       "6      Jalen Rose   80.0     85   84.0     83\n",
       "7     Jim Jackson   92.0     91   94.0     95"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read csv from github \n",
    "Test = pd.read_csv('https://raw.githubusercontent.com/Yunxng/DAV.5400/master/Test.csv')\n",
    "#define the NaN's value as 0\n",
    "Test=Test.fillna(0)\n",
    "Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Test1</th>\n",
       "      <th>Test2</th>\n",
       "      <th>Test3</th>\n",
       "      <th>Test4</th>\n",
       "      <th>range</th>\n",
       "      <th>Average Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Charles Barkey</td>\n",
       "      <td>0.0</td>\n",
       "      <td>89</td>\n",
       "      <td>0.0</td>\n",
       "      <td>76</td>\n",
       "      <td>89.0</td>\n",
       "      <td>41.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Steve Smith</td>\n",
       "      <td>84.0</td>\n",
       "      <td>75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>86</td>\n",
       "      <td>86.0</td>\n",
       "      <td>61.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Dan Bonner</td>\n",
       "      <td>76.0</td>\n",
       "      <td>68</td>\n",
       "      <td>80.0</td>\n",
       "      <td>81</td>\n",
       "      <td>13.0</td>\n",
       "      <td>76.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Chris Webber</td>\n",
       "      <td>75.0</td>\n",
       "      <td>75</td>\n",
       "      <td>76.0</td>\n",
       "      <td>92</td>\n",
       "      <td>17.0</td>\n",
       "      <td>79.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kenny Smith</td>\n",
       "      <td>80.0</td>\n",
       "      <td>81</td>\n",
       "      <td>79.0</td>\n",
       "      <td>85</td>\n",
       "      <td>6.0</td>\n",
       "      <td>81.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Jalen Rose</td>\n",
       "      <td>80.0</td>\n",
       "      <td>85</td>\n",
       "      <td>84.0</td>\n",
       "      <td>83</td>\n",
       "      <td>5.0</td>\n",
       "      <td>83.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Reggie Miller</td>\n",
       "      <td>97.0</td>\n",
       "      <td>80</td>\n",
       "      <td>87.0</td>\n",
       "      <td>91</td>\n",
       "      <td>17.0</td>\n",
       "      <td>88.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Jim Jackson</td>\n",
       "      <td>92.0</td>\n",
       "      <td>91</td>\n",
       "      <td>94.0</td>\n",
       "      <td>95</td>\n",
       "      <td>4.0</td>\n",
       "      <td>93.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Name  Test1  Test2  Test3  Test4  range  Average Score\n",
       "3  Charles Barkey    0.0     89    0.0     76   89.0          41.25\n",
       "2     Steve Smith   84.0     75    0.0     86   86.0          61.25\n",
       "1      Dan Bonner   76.0     68   80.0     81   13.0          76.25\n",
       "5    Chris Webber   75.0     75   76.0     92   17.0          79.50\n",
       "4     Kenny Smith   80.0     81   79.0     85    6.0          81.25\n",
       "6      Jalen Rose   80.0     85   84.0     83    5.0          83.00\n",
       "0   Reggie Miller   97.0     80   87.0     91   17.0          88.75\n",
       "7     Jim Jackson   92.0     91   94.0     95    4.0          93.00"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Find the range of each student.\n",
    "Test['range']=Test.max(axis=1)-Test.min(axis=1)\n",
    "#Seeking the Average Achievement of Everyone\n",
    "Test['Average Score'] = Test.apply(lambda x: x['Test1'] +  x['Test2'] \n",
    "                            +x['Test3']+x['Test4'], axis=1)/4\n",
    "\n",
    "Test.sort_values(by='Average Score')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2027af28>"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create a bar chart to visualize the comparison for Average Score \n",
    "plt.figure(figsize=(10,6))\n",
    "sns.barplot(x='Name', y='Average Score', data=Test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Test1</th>\n",
       "      <th>Test2</th>\n",
       "      <th>Test3</th>\n",
       "      <th>Test4</th>\n",
       "      <th>range</th>\n",
       "      <th>Average Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Reggie Miller</td>\n",
       "      <td>97.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>91.000</td>\n",
       "      <td>17.000</td>\n",
       "      <td>88.75000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Dan Bonner</td>\n",
       "      <td>76.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>81.000</td>\n",
       "      <td>13.000</td>\n",
       "      <td>76.25000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Steve Smith</td>\n",
       "      <td>84.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>86.000</td>\n",
       "      <td>86.000</td>\n",
       "      <td>61.25000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Charles Barkey</td>\n",
       "      <td>0.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>76.000</td>\n",
       "      <td>89.000</td>\n",
       "      <td>41.25000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kenny Smith</td>\n",
       "      <td>80.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>85.000</td>\n",
       "      <td>6.000</td>\n",
       "      <td>81.25000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Chris Webber</td>\n",
       "      <td>75.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>92.000</td>\n",
       "      <td>17.000</td>\n",
       "      <td>79.50000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Jalen Rose</td>\n",
       "      <td>80.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>83.000</td>\n",
       "      <td>5.000</td>\n",
       "      <td>83.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Jim Jackson</td>\n",
       "      <td>92.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>95.000</td>\n",
       "      <td>4.000</td>\n",
       "      <td>93.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Total Average</td>\n",
       "      <td>73.0</td>\n",
       "      <td>80.5</td>\n",
       "      <td>62.5</td>\n",
       "      <td>86.125</td>\n",
       "      <td>29.625</td>\n",
       "      <td>75.53125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Total MAX</td>\n",
       "      <td>97.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>95.000</td>\n",
       "      <td>89.000</td>\n",
       "      <td>93.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Total MIN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>76.000</td>\n",
       "      <td>4.000</td>\n",
       "      <td>41.25000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Name  Test1  Test2  Test3   Test4   range  Average Score\n",
       "0    Reggie Miller   97.0   80.0   87.0  91.000  17.000       88.75000\n",
       "1       Dan Bonner   76.0   68.0   80.0  81.000  13.000       76.25000\n",
       "2      Steve Smith   84.0   75.0    0.0  86.000  86.000       61.25000\n",
       "3   Charles Barkey    0.0   89.0    0.0  76.000  89.000       41.25000\n",
       "4      Kenny Smith   80.0   81.0   79.0  85.000   6.000       81.25000\n",
       "5     Chris Webber   75.0   75.0   76.0  92.000  17.000       79.50000\n",
       "6       Jalen Rose   80.0   85.0   84.0  83.000   5.000       83.00000\n",
       "7      Jim Jackson   92.0   91.0   94.0  95.000   4.000       93.00000\n",
       "8    Total Average   73.0   80.5   62.5  86.125  29.625       75.53125\n",
       "9        Total MAX   97.0   91.0   94.0  95.000  89.000       93.00000\n",
       "10       Total MIN    0.0   68.0    0.0  76.000   4.000       41.25000"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Calculate the average score of each subject\n",
    "Test.loc[8]= Test.mean()\n",
    "Test.iloc[8,0]='Total Average'\n",
    "\n",
    "#Search for the highest and lowest scores in all subjects\n",
    "Test.loc[9] = Test.apply(lambda x: x.max())\n",
    "Test.loc[10] = Test.apply(lambda x: x.min())\n",
    "\n",
    "Test.iloc[9,0]='Total MAX'\n",
    "Test.iloc[10,0]='Total MIN'\n",
    "Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>variable</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Charles Barkey</td>\n",
       "      <td>Test3</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Charles Barkey</td>\n",
       "      <td>Test4</td>\n",
       "      <td>76.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Charles Barkey</td>\n",
       "      <td>Test1</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Charles Barkey</td>\n",
       "      <td>Test2</td>\n",
       "      <td>89.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Charles Barkey</td>\n",
       "      <td>Average Score</td>\n",
       "      <td>41.25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Name       variable  value\n",
       "25  Charles Barkey          Test3   0.00\n",
       "36  Charles Barkey          Test4  76.00\n",
       "3   Charles Barkey          Test1   0.00\n",
       "14  Charles Barkey          Test2  89.00\n",
       "47  Charles Barkey  Average Score  41.25"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# change the dataset from wide format to long format by setting the \"Name\" as id variable\n",
    "long_test=pd.melt(Test, id_vars=[\"Name\"], value_vars=['Test1','Test2','Test3','Test4','Average Score'])\n",
    "long_test.sort_values(by='Name').head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above analysis,Jim Jackson had the highest average test grades;test1 had the highest grades;Charles Barkey had the greatest range of test grades"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data3: Data for different institutions in the academic year of 2016/2017"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unique ID of the institution</th>\n",
       "      <th>Level of student</th>\n",
       "      <th>American Indian or Alaska Native</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Black or African American</th>\n",
       "      <th>Hispanic or Latino</th>\n",
       "      <th>Native Hawaiian or Other Pacific Islander</th>\n",
       "      <th>White</th>\n",
       "      <th>Two or more races</th>\n",
       "      <th>Race/ethnicity unknown</th>\n",
       "      <th>Nonresident alien</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100654</td>\n",
       "      <td>Undergraduate</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>4742</td>\n",
       "      <td>36</td>\n",
       "      <td>10</td>\n",
       "      <td>137</td>\n",
       "      <td>210</td>\n",
       "      <td>11</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>100654</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>4</td>\n",
       "      <td>11</td>\n",
       "      <td>961</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>151</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>100663</td>\n",
       "      <td>Undergraduate</td>\n",
       "      <td>36</td>\n",
       "      <td>743</td>\n",
       "      <td>3497</td>\n",
       "      <td>429</td>\n",
       "      <td>4</td>\n",
       "      <td>7515</td>\n",
       "      <td>522</td>\n",
       "      <td>198</td>\n",
       "      <td>364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>100663</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>26</td>\n",
       "      <td>471</td>\n",
       "      <td>1550</td>\n",
       "      <td>289</td>\n",
       "      <td>11</td>\n",
       "      <td>6437</td>\n",
       "      <td>269</td>\n",
       "      <td>176</td>\n",
       "      <td>659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>100690</td>\n",
       "      <td>Undergraduate</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>195</td>\n",
       "      <td>44</td>\n",
       "      <td>1</td>\n",
       "      <td>66</td>\n",
       "      <td>0</td>\n",
       "      <td>123</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>100690</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>152</td>\n",
       "      <td>43</td>\n",
       "      <td>4</td>\n",
       "      <td>93</td>\n",
       "      <td>0</td>\n",
       "      <td>142</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>100706</td>\n",
       "      <td>Undergraduate</td>\n",
       "      <td>90</td>\n",
       "      <td>304</td>\n",
       "      <td>813</td>\n",
       "      <td>313</td>\n",
       "      <td>3</td>\n",
       "      <td>5055</td>\n",
       "      <td>129</td>\n",
       "      <td>595</td>\n",
       "      <td>217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>100706</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>23</td>\n",
       "      <td>71</td>\n",
       "      <td>202</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>1518</td>\n",
       "      <td>20</td>\n",
       "      <td>115</td>\n",
       "      <td>365</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unique ID of the institution Level of student  \\\n",
       "0                        100654    Undergraduate   \n",
       "1                        100654         Graduate   \n",
       "2                        100663    Undergraduate   \n",
       "3                        100663         Graduate   \n",
       "4                        100690    Undergraduate   \n",
       "5                        100690         Graduate   \n",
       "6                        100706    Undergraduate   \n",
       "7                        100706         Graduate   \n",
       "\n",
       "   American Indian or Alaska Native  Asian  Black or African American  \\\n",
       "0                                11     12                       4742   \n",
       "1                                 4     11                        961   \n",
       "2                                36    743                       3497   \n",
       "3                                26    471                       1550   \n",
       "4                                 0      2                        195   \n",
       "5                                 2      1                        152   \n",
       "6                                90    304                        813   \n",
       "7                                23     71                        202   \n",
       "\n",
       "   Hispanic or Latino  Native Hawaiian or Other Pacific Islander  White  \\\n",
       "0                  36                                         10    137   \n",
       "1                   7                                          1    151   \n",
       "2                 429                                          4   7515   \n",
       "3                 289                                         11   6437   \n",
       "4                  44                                          1     66   \n",
       "5                  43                                          4     93   \n",
       "6                 313                                          3   5055   \n",
       "7                  64                                          0   1518   \n",
       "\n",
       "   Two or more races  Race/ethnicity unknown  Nonresident alien  \n",
       "0                210                      11                 38  \n",
       "1                 14                       3                 33  \n",
       "2                522                     198                364  \n",
       "3                269                     176                659  \n",
       "4                  0                     123                  0  \n",
       "5                  0                     142                  0  \n",
       "6                129                     595                217  \n",
       "7                 20                     115                365  "
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read csv from github \n",
    "enroll=pd.read_csv('https://raw.githubusercontent.com/Yunxng/DAV.5400/master/W9%20untidy%20data-1.csv')\n",
    "enroll\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unique ID of the institution</th>\n",
       "      <th>Level of student</th>\n",
       "      <th>ethnicity</th>\n",
       "      <th>Number of each ethnicity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100654</td>\n",
       "      <td>Undergraduate</td>\n",
       "      <td>American Indian or Alaska Native</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>100654</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>American Indian or Alaska Native</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>100663</td>\n",
       "      <td>Undergraduate</td>\n",
       "      <td>American Indian or Alaska Native</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>100663</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>American Indian or Alaska Native</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>100690</td>\n",
       "      <td>Undergraduate</td>\n",
       "      <td>American Indian or Alaska Native</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unique ID of the institution Level of student  \\\n",
       "0                        100654    Undergraduate   \n",
       "1                        100654         Graduate   \n",
       "2                        100663    Undergraduate   \n",
       "3                        100663         Graduate   \n",
       "4                        100690    Undergraduate   \n",
       "\n",
       "                          ethnicity  Number of each ethnicity  \n",
       "0  American Indian or Alaska Native                        11  \n",
       "1  American Indian or Alaska Native                         4  \n",
       "2  American Indian or Alaska Native                        36  \n",
       "3  American Indian or Alaska Native                        26  \n",
       "4  American Indian or Alaska Native                         0  "
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# change the dataset from wide format to long format by setting the \"Unique ID of the institution\"and'Level of student' as id variable\n",
    "long_enroll=pd.melt(enroll, id_vars=[\"Unique ID of the institution\",'Level of student'], value_vars=['American Indian or Alaska Native','Asian','Black or African American',\n",
    "                                                                                                     'Hispanic or Latino','Native Hawaiian or Other Pacific Islander',  \n",
    "                                                                                                     'White','Two or more races','Race/ethnicity unknown','Nonresident alien'])\n",
    "long_enroll.rename(columns={'variable':'ethnicity','value':'Number of each ethnicity'},inplace=True)\n",
    "long_enroll.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Number of each ethnicity</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Unique ID of the institution</th>\n",
       "      <th>Level of student</th>\n",
       "      <th>ethnicity</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"10\" valign=\"top\">100654</th>\n",
       "      <th rowspan=\"9\" valign=\"top\">Graduate</th>\n",
       "      <th>American Indian or Alaska Native</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asian</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Black or African American</th>\n",
       "      <td>961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hispanic or Latino</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Native Hawaiian or Other Pacific Islander</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nonresident alien</th>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Race/ethnicity unknown</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Two or more races</th>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White</th>\n",
       "      <td>151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Undergraduate</th>\n",
       "      <th>American Indian or Alaska Native</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                         Number of each ethnicity\n",
       "Unique ID of the institution Level of student ethnicity                                                          \n",
       "100654                       Graduate         American Indian or Alaska Native                                  4\n",
       "                                              Asian                                                            11\n",
       "                                              Black or African American                                       961\n",
       "                                              Hispanic or Latino                                                7\n",
       "                                              Native Hawaiian or Other Pacific Islander                         1\n",
       "                                              Nonresident alien                                                33\n",
       "                                              Race/ethnicity unknown                                            3\n",
       "                                              Two or more races                                                14\n",
       "                                              White                                                           151\n",
       "                             Undergraduate    American Indian or Alaska Native                                 11"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create a pivot table by mimic the origianl format\n",
    "long_enroll.pivot_table(index=[\"Unique ID of the institution\",'Level of student','ethnicity']).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of each ethnicity</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>American Indian or Alaska Native</th>\n",
       "      <td>192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asian</th>\n",
       "      <td>1615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Black or African American</th>\n",
       "      <td>12112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hispanic or Latino</th>\n",
       "      <td>1225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Native Hawaiian or Other Pacific Islander</th>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nonresident alien</th>\n",
       "      <td>1676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Race/ethnicity unknown</th>\n",
       "      <td>1363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Two or more races</th>\n",
       "      <td>1164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White</th>\n",
       "      <td>20972</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           Number of each ethnicity\n",
       "ethnicity                                                          \n",
       "American Indian or Alaska Native                                192\n",
       "Asian                                                          1615\n",
       "Black or African American                                     12112\n",
       "Hispanic or Latino                                             1225\n",
       "Native Hawaiian or Other Pacific Islander                        34\n",
       "Nonresident alien                                              1676\n",
       "Race/ethnicity unknown                                         1363\n",
       "Two or more races                                              1164\n",
       "White                                                         20972"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create a frame to contain the total number of each ethnicity\n",
    "df = long_enroll.groupby(['ethnicity']).sum()['Number of each ethnicity'].to_frame()\n",
    "\n",
    "df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of each ethnicity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4483.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>7209.060601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>34.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1164.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1363.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1676.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>20972.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Number of each ethnicity\n",
       "count                  9.000000\n",
       "mean                4483.666667\n",
       "std                 7209.060601\n",
       "min                   34.000000\n",
       "25%                 1164.000000\n",
       "50%                 1363.000000\n",
       "75%                 1676.000000\n",
       "max                20972.000000"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of each institution</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Unique ID of the institution</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>100654</th>\n",
       "      <td>6392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100663</th>\n",
       "      <td>23196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100690</th>\n",
       "      <td>868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100706</th>\n",
       "      <td>9897</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              Number of each institution\n",
       "Unique ID of the institution                            \n",
       "100654                                              6392\n",
       "100663                                             23196\n",
       "100690                                               868\n",
       "100706                                              9897"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create a frame to contain the total number of each institution\n",
    "df1=long_enroll.groupby(['Unique ID of the institution']).sum()['Number of each ethnicity'].to_frame()\n",
    "df1.rename(columns={'Number of each ethnicity':'Number of each institution'},inplace=True)\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a20505d68>"
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Describe the number of people of each race and draw a bar chart.\n",
    "df.plot(kind='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above analysis, it can be seen that a total of nine races of students have been admitted. White people accounted for the largest number, a total of 20972 people. Native Hawaiian or Other Pacific Islander is the smallest of all races, only 34. Institution 100 663 enrolled the largest number of people, 23196"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
